# This file was *autogenerated* from the file FHMMC.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_1p0 = RealNumber('1.0'); _sage_const_8 = Integer(8); _sage_const_10 = Integer(10)
action = {}
class Queue: #A class for the queueing system
    def __init__(self,lmbda,mu,C,R,TimeCost = _sage_const_1 ,K = False,alpha = _sage_const_1 ,epsilon = _sage_const_10 **-_sage_const_2 ):
        self.lmbda = lmbda
        self.mu = mu
        self.R = R
        self.TC = TimeCost
        self.servers = C
        self.queuelength = _sage_const_0 
        self.Selfish =  int(R*self.mu)
        self.alpha = alpha
        self.epsilon = epsilon
        self.A = [_sage_const_0 ,_sage_const_1 ]

        if K == False:
            self.K = self.Selfish
        else:
            self.K = K
        print self.servers
        self.findQ()
        self.findP()

    def findQ(self): #Transition rate matrix for the queue
        Q = MatrixSpace(QQ,_sage_const_5 *self.servers,_sage_const_5 *self.servers)
        rowdata = []

        for e in range(_sage_const_5 *self.servers):

            for i in range(_sage_const_5 *self.servers):
                if i == e+_sage_const_1 :
                    rowdata.append(self.lmbda)
                elif i == e-_sage_const_1 :
                        if e<= self.servers:
                            rowdata.append(e*self.mu)
                        else:
                            rowdata.append(self.servers*self.mu)
                else:
                    rowdata.append(_sage_const_0 )

        self.Q = Q(rowdata)
        rowsums = [sum(e) for e in self.Q]
        for i in range(_sage_const_5 *self.servers):
            self.Q[i,i] = -rowsums[i]

    def findP(self): #Converts Q to P
        Diag = []

        for e in range(_sage_const_5 *self.servers):

            Diag.append(abs(self.Q[e][e]))

        t = _sage_const_1 /max(Diag)
        print t
        self.P = self.Q*t + identity_matrix(self.Q.nrows())
        self.P2 = [self.P[_sage_const_0 ][_sage_const_0 ],self.P[_sage_const_0 ][_sage_const_1 ]]
        print self.P2
        for e in self.P:
            print [i for i in e]
    def Pij(self,i,j = _sage_const_0 ):

        return self.P[i][j]


    def Cost(self,state,action): # Returns the cost
        if action == _sage_const_0 :
            return _sage_const_0 
        else:
            if state < self.servers:
                return _sage_const_1 *((self.mu)**-_sage_const_1 ) - self.R
            else:
                return (state+_sage_const_1 )*(self.mu*self.servers)**-_sage_const_1  - self.R

    def SolveNHor(self,T=_sage_const_0 ,N=_sage_const_0 ,service = False): #Recursively calculates cost for current state

        values = {}
        values[N] = []
        if not T==_sage_const_0 :

            if N >= self.servers or N == _sage_const_0 :

                if not service:

                    for e in self.A:
                        values[N].append(((self.Cost(N,e)+self.P2[_sage_const_0 ]*self.SolveNHor(T-_sage_const_1 ,max(N+e-_sage_const_1 ,_sage_const_0 ),True))+self.P2[_sage_const_1 ]*self.SolveNHor(T-_sage_const_1 ,N+e)))
                else:
                    values[N].append((self.P2[_sage_const_0 ]*self.SolveNHor(T-_sage_const_1 ,max(N-_sage_const_1 ,_sage_const_0 ),True))+self.P2[_sage_const_1 ]*self.SolveNHor(T-_sage_const_1 ,N))
            else:
                if not service:

                    for e in self.A:
                        values[N].append((( self.Cost(N,e) + self.Pij(N+e,N+e-_sage_const_1 )*self.SolveNHor(T-_sage_const_1 ,N+e-_sage_const_1 ,True)) + self.Pij(N + e,N + e)*self.SolveNHor(T - _sage_const_1 , N + e,True )  + self.P2[_sage_const_1 ]*self.SolveNHor(T-_sage_const_1 ,N+e)))
                else:
                    values[N].append( self.Pij(N,N-_sage_const_1 )*self.SolveNHor(T-_sage_const_1 ,N-_sage_const_1 ,True) + self.Pij(N,N)*self.SolveNHor(T-_sage_const_1 ,N,True) + self.P2[_sage_const_1 ]*self.SolveNHor(T-_sage_const_1 ,N) )

            action[N] = values[N].index(min(values[N]))
            return min(values[N])

        else:
            if not service:
                for e in self.A:
                    values[N].append((self.Cost(N,e)))
            else:
                for e in self.A:
                    values[N].append(_sage_const_0 )
            return min(values[N])
simple = Queue(_sage_const_3 ,_sage_const_5 ,_sage_const_4 ,_sage_const_1p0 )
print simple.SolveNHor(_sage_const_8 ,_sage_const_0 )
